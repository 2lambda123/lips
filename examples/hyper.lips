;; -*- scheme -*-
;; This is example code that's needed to create shorter hyperapp applications
;;
;; This file is part of the LIPS - Simple lisp in JavaScript
;; Copyriht (C) 2019 Jakub T. Jankiewicz <https://jcubic.pl>
;; Released under MIT license
;;

(define h (. hyperapp "h"))
(define app (. hyperapp "app"))


(define key-list '(:foo 10 :bar 20))

;; ---------------------------------------------------------------------------------------
(define (key? symbol)
  "(key? symbol)

   Function check if symbol is key symbol, have colon as first character."
  (and (symbol? symbol) (eq? ":" (substring (symbol->string symbol) 0 1))))

;; ---------------------------------------------------------------------------------------
(define (key->string symbol)
  "(key->string symbol)

   If symbol is key it convert that to string - remove colon."
  (if (key? symbol)
      (substring (symbol->string symbol) 1)))

;; ---------------------------------------------------------------------------------------
(define (make-tags expr)
  "(make-tags expression)

   Function that return list structure of code with better syntax then raw LIPS"
  `(h ,(key->string (car expr))
      (alist->object (quasiquote ,@(pair-map (lambda (car cdr)
                                               (cons (cons (key->string car)
                                                           (list 'unquote cdr))))
                                             (cadr expr))))
      ,(if (not (null? (cddr expr)))
           (if (and (pair? (caddr expr)) (let ((s (caaddr expr)))
                                           (and (symbol? s) (eq? s 'list))))
               `(list->array (list ,@(map make-tags (cdaddr expr))))
               (caddr expr)))))


;; ---------------------------------------------------------------------------------------
(define-macro (with-tags expr)
  "(with-tags expression)

   Macro that evalute LIPS shorter code for hyperapp"
  (make-tags expr))

;;example macro output:
;;
;;(define (view state actions)
;;  (h "div" (make-empty-object)
;;     (list->array (list
;;                   (h "h1" (make-empty-object) (value (cdr (assoc 'count (. state "counter")))))
;;                   (h "button" (klist->object `(:onclick ,(lambda () (--> actions (down 1))))) "-")
;;                   (h "button" (klist->object `(:onclick ,(lambda () (--> actions (up 1))))) "+")))))
;;for code:
;;
;;(define (view state actions)
;;  (with-tags (:div ()
;;                   (list (:h1 () (value (cdr (assoc 'count (. state "counter")))))
;;                         (:button (:onclick (lambda () (--> actions (down 1)))) "-")
;;                         (:button (:onclick (lambda () (--> actions (up 1)))) "+")))))


