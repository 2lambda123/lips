;; -*- scheme -*-
;; Helper functions and macros to be used with LIPS
;;
;; This file is part of the LIPS - Simple lisp in JavaScript
;; Copyriht (C) 2019 Jakub T. Jankiewicz <https://jcubic.pl>
;; Released under MIT license
;;

(define-macro (--> expr . code)
  "Helper macro that simplify calling methods on objects. It work with chaining

   usage: (--> ($ \"body\")
               (css \"color\" \"red\")
               (on \"click\" (lambda () (print \"click\"))))

          (--> document (querySelectorAll \"div\"))"
  (let ((obj (gensym)))
    `(let ((,obj ,expr))
       ,@(map (lambda (code)
                (let ((name (gensym))
                      (fn (gensym)))
                  `(let* ((,name ,(symbol->string (car code)))
                          (,fn (. ,obj ,name)))
                     (if (not (function? ,fn))
                         (error (concat ,name " is not a function"))
                         (set! ,obj (apply ,fn (list ,@(cdr code))))))))
              code)
       ,obj)))

;; ---------------------------------------------------------------------------------------
(define (dir obj)
  "(dir obj)

   Function return all props on the object including those in prototype chain."
  (if (null? obj) nil
      (append (array->list ((. Object "getOwnPropertyNames") (unbind obj)))
              (dir ((. Object "getPrototypeOf") (unbind obj))))))


;; ---------------------------------------------------------------------------------------
(define log (. console "log"))


;; ---------------------------------------------------------------------------------------
(define (symbol->string s)
  "(symbol->string symbol)

   Function convert LIPS symbol to string."
  (and (symbol? s) (. s "name")))

;; ---------------------------------------------------------------------------------------
(define (string->symbol string)
  "(string->symbol string)

   Function convert string to LIPS symbol."
  (and (string? string) (new (. lips "Symbol") string)))

;; ---------------------------------------------------------------------------------------
(define (value obj)
  "(value obj)

   Function unwrap LNumbers and convert nil value to undefined."
  (if (eq? obj nil)
      undefined
      (if (number? obj)
          ((. obj "valueOf"))
          obj)))

;;defined in JS, you can easily create them in LIPS
;;(define (substring string start end)
;;  "(substring string start [end])
;;
;;   Function return part of the string that start with start index
;;   and end in end index, if end is undfined it return to the end."
;;  (--> string (substring (value start) (value end))))
;;
;;
;;(define (concat . args)
;;  "(concat . strings)
;;
;;   Function create new string by joining its arguments"
;;  (--> (list->array args) (join "")))

;; ---------------------------------------------------------------------------------------
(define-macro (define-global name)
  `(set-obj! global ,(symbol->string name) ,name))

;; ---------------------------------------------------------------------------------------
(define (alist->object alist)
  "(alist->object alist)

   Function convert alist pairs to JavaScript object."
  (if (pair? alist)
      ((. alist "toObject"))))


;; ---------------------------------------------------------------------------------------
(define (pair-map fn seq-list)
  "(seq-map fn list)

   Function call fn argument for pairs in a list and return combined list with
   values returned from function fn. It work like the map but take two items from list"
  (let iter ((seq-list seq-list) (result '()))
    (if (null? seq-list)
        result
        (if (and (pair? seq-list) (pair? (cdr seq-list)))
            (let* ((first (car seq-list))
                   (second (cadr seq-list))
                   (value (fn first second)))
              (if (null? value)
                  (iter (cddr seq-list) result)
                  (iter (cddr seq-list) (cons value result))))))))


;; ---------------------------------------------------------------------------------------
(define (object-expander expr)
  "(object-expander '(:foo (:bar 10) (:baz (1 2 3))))

   Recursive function helper for defining LIPS code for create objects using key like syntax."
  (let ((name (gensym)))
    `(let ((,name (alist->object '())))
       ,@(pair-map (lambda (key value)
                     (if (not (key? key))
                         (error (concat (type key) " " (string key) " is not a string"))
                         (let ((prop (key->string key)))
                           (if (and (pair? value) (key? (car value)))
                             `(set-obj! ,name ,prop ,(object-expander value))
                             `(set-obj! ,name ,prop ,value)))))
                   expr)
       ,name)))

;; ---------------------------------------------------------------------------------------
(define-macro (make-object . expr)
  "(make-object :name value)

   Macro that create JavaScript object using key like syntax."
  (object-expander expr))



;; ---------------------------------------------------------------------------------------
(define (alist->assign desc . sources)
  "(alist->assign alist . list-of-alists)

   Function that work like Object.assign but for LIPS alist."
  (for-each (lambda (source)
              (for-each (lambda (pair)
                          (let* ((key (car pair))
                                 (value (cdr pair))
                                 (d-pair (assoc key desc)))
                            (if (pair? d-pair)
                                (set-cdr! d-pair value)
                                (append! desc (list pair)))))
                        source))
            sources)
  desc)


;; ---------------------------------------------------------------------------------------
(define (key? symbol)
  "(key? symbol)

   Function check if symbol is key symbol, have colon as first character."
  (and (symbol? symbol) (eq? ":" (substring (symbol->string symbol) 0 1))))

;; ---------------------------------------------------------------------------------------
(define (key->string symbol)
  "(key->string symbol)

   If symbol is key it convert that to string - remove colon."
  (if (key? symbol)
      (substring (symbol->string symbol) 1)))

(define-macro (define-symbol-macro spec . rest)
  "(define-symbol-macro (name . args) . body)

   Macro that creates special symbol macro for evaluator similar to build in , or `.
   It's like alias for real macro. Similar to CL reader macros but it receive already
   parsed code like normal macros."
   ;; this is executed in two different ways one when there are no macro and the other
   ;; if there is macro defined, in second case it will put list as first element
   ;; of the body even is it's called like this (define-symbol-macro (# code)
  (let* ((name (car spec))
         (symbol (cadr spec))
         (args (cddr spec)))
     `(begin
        (add-special! ,symbol ',name)
        (define-macro (,name ,@args) ,@rest))))

(define-symbol-macro (make-vector "#" arg)
  "(make-vector (1 2 3))
   #(1 2 3)

   Macro for defining vectors (arrays)."
  `(list->array (list ,@arg)))


(define-macro (module name . body)
  "(module module-name . body)

   Macro for defining modules inside you can use define to create functions.
   And use export name to add that name to defined environment."
  (let ((parent (. (current-environment) 'parent)))
    `(let ((__module-exports__ (new (. lips 'Environment) (concat "module-" ,(symbol->string name)))))
       (define-macro (export name) `(--> __module-exports__ (set ',name ,name)))
       ,@body
       (--> ,parent (set ',name __module-exports__)))))

(define-macro (import name module)
  "(input function-name module)

   Macro for importing function from module"
  `(define ,name (--> ,module (get ',name))))
