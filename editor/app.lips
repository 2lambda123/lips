;; -*- scheme -*-


(define (require url)
  "Load JS or script tag"
  (new Promise (lambda (resolve)
                 (if (null? (match /.css$/ url))
                     ((. $ 'getScript) url resolve)
                     (let ((link ($ (concat "<link type=\"text/css\" rel=\"stylesheet\" href=\""
                                             url
                                             "\"/>"))))
                       (--> link (on "load" resolve) (appendTo "head")))))))


(define $ jQuery)
;; (require "https://unpkg.com/alasql@0.4.11/dist/alasql.min.js")

(require "../examples/prism.js")

(define (prn x)
  (print x)
  x)

(define-macro (define-global first . rest)
  "(define-global var value)
   (define-global (name . args) body)

   Macro that define functions or variables in global context, so they can be used
   inside let and get let variables in closure, Useful for universal macros."
  (if (pair? first)
      (let ((name (car first)))
        `(--> (. lips 'env)
              (set ,(symbol->string name) (lambda ,(cdr first) ,@rest))))
      `(--> (. lips 'env) (set ,(symbol->string first) ,(car rest)))))

(define-macro (globalize expr . rest)
  "(globalize expr)

   Macro will get the value of the expression and add each method as function to global
   scope."
  (let ((obj (eval expr (current-environment)))
        (make-name (if (pair? rest)
                       (let ((pre (car rest)))
                         (lambda (name) (string->symbol (concat pre name))))
                       string->symbol)))
    `(begin
       ,@(filter pair?
                 (map (lambda (key)
                        (if (function? (. obj key))
                            (let* ((fname (gensym))
                                   (args (gensym)))
                              `(define-global (,(make-name key) . ,args)
                                 (apply (. ,expr ,key) ,args)))))
                        (array->list (--> Object (keys obj))))))))


;; setup isomorphic-git and global fs methods as functions

(let* ((fs (new LightningFS "fs"))
       (pfs (. fs 'promises)))
  (global fs)
  (--> (. git 'plugins) (set "fs" fs))
  (globalize git git.)
  (globalize (let ((x pfs)) x) fs.))


(define (new-repo dir)
  "Prepare new git repo with base app"
  (let ((dir (if (null? (match /^\// dir)) (concat "/" dir) dir)))
    (if (not (directory? dir))
        (begin
          (fs.mkdir dir)
          (git.init (make-object :dir dir))))))

(define (have-type type x)
  (try (eq? (. (fs.stat x) 'type) type)
       (catch (e) false)))

(define directory? (curry have-type "dir"))
(define file? (curry have-type "file"))


(define (resiter-service-worker file)
  (let* ((scope (replace /\/[^\/]+$/ "/" (. location 'pathname)))
         (register (. navigator 'serviceWorker 'register)))
    (register "sw.js" (make-object :scope scope))))

;; registering service worker
(ignore (try (let ((req (resiter-service-worker "sw.js")))
               (global req)
               (--> req (addEventListener "updatefound" (lambda ()
                                                          (let ((msg "A new service worker is being installed"))
                                                            (--> console (log msg))))))
               (--> console (log (concat "Registration succeeded. Scope is " (. req 'scope)))))
             (catch (e)
                    (--> console (log (concat "Registration failed " e))))))

(define refresh-editors (debounce (lambda ()
                                    (for-each (lambda (editor) (--> editor (refresh)))
                                              (list html-editor css-editor lips-editor)))
                                  40))

(--> ($ ".container")
     (split (make-object :percent true
                         :orientation "horizontal"
                         :limit 10
                         :onDrag refresh-editors
                         :position (list->array '("50%" "30%"))))
     (find ".panels")
     (split (make-object :percent true
                         :orientation "vertical"
                         :onDrag refresh-editors
                         :limit 10
                         :position (list->array '("33%" "33%")))))


(define (editor selector mode)
  (--> CodeMirror (fromTextArea (--> document (querySelector selector))
                                (make-object :mode mode
                                             :theme "twilight"
                                             :scrollbarStyle "simple"
                                             :lineWrapping true
                                             :matchBrackets true
                                             :lineNumbers true))))

(define css-editor (editor ".css .code" "css"))
(define lips-editor (editor ".lips .code" "scheme"))
(define html-editor (editor ".html .code" "htmlmixed"))

;; terminal function defined in ../examples/terminal.js
(define term (terminal (make-object :selector ($ ".term") :lips lips :name "lips-editor")))
(--> (. $ 'terminal) (syntax "scheme"))



(--> ($ "body") (removeClass "cloak"))

(define-macro (let** list . body)
  `(apply (lambda ,(map car list) ,@body) (list* ,@(map cadr list))))

(define (ajax path)
  (--> (fetch path) (text)))

(define (new-app dir)
  (let ((helpers.lips (ajax "../examples/helpers.lips"))
        (index.html (ajax "template/index.html"))
        (app.lips (ajax "template/app.lips")))
    (fs.writeFile (join "/" (list dir "index.html")) index.html)
    (fs.writeFile (join "/" (list dir "app.lips")) app.lips)
    (fs.writeFile (join "/" (list dir "helpers.lips")) helpers.lips)
    (--> html-editor (setValue index.html))
    (--> lips-editor (setValue app.lips))))

(define struct `((,css-editor . "style.css")
                 (,html-editor . "index.html")
                 (,lips-editor . "app.lips")))

(define (load-into-editor editor filename)
  (--> editor (setValue (if (file? filename) (readFile filename) ""))))

(define (editor-to-file editor file)
  (fs.writeFile file (--> editor (getValue))))

(define (do-editors fn name)
  (for-each (lambda (pair)
              (if (not (directory? name))
                  (error (concat name " is not directory"))
                  (let ((path (join "/" (list name (cdr pair)))))
                    (fn (car pair) path))))
            struct))

(define load-app (curry do-editors load-into-editor))
(define save-app (curry do-editors editor-to-file))

(define (run-app name)
  (let* (($iframe ($ ".preview iframe"))
         (src (--> $iframe (val))))
    (if (null? (match (new RegExp (concat "__browserfs__/" name)) src))
        (--> $iframe (attr "src" (concat "./__browserfs__/" name "/")))
        (refresh-src $iframe))))


(define (readFile path)
  (let ((d (new TextDecoder "utf-8")))
    (--> d (decode (fs.readFile path)))))

(define-macro (.on $element event . code)
  `(--> ,$element (on ,event (lambda ()
                              ,@code))))

(define (refresh-src $node)
  (let* ((old (--> $node (attr "src")))
         (now (--> Date (now)))
         (new-src (if (null? (match /\?/ old))
                      (concat old "?" now)
                      (replace /[^?]*$/ now))))
    (--> $node (attr "src" new-src))))



(let ((apps (array->list (fs.readdir "/")))
      ($save ($ "#save"))
      ($iframe ($ ".preview iframe"))
      ($run ($ "#run"))
      ($apps ($ "#apps")))
  (--> $apps (empty))
  (.on $apps "change" (load-app (concat "/" (--> $apps (val)))))
  (.on $save "click" (save-app (concat "/" (--> $apps (val)))))
  (.on $run "click" (run-app (--> $apps (val))))
  (for-each (lambda (app)
              (--> $apps (append (concat "<option>" app "</option>"))))
            apps)
  (--> $apps (trigger "change")))
