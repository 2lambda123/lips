;; -*- scheme -*-


(define (require url)
  "Load JS or script tag"
  (new Promise (lambda (resolve)
                 (if (null? (match /.css$/ url))
                     ((. $ 'getScript) url resolve)
                     (let ((link ($ (concat "<link type=\"text/css\" rel=\"stylesheet\" href=\""
                                             url
                                             "\"/>"))))
                       (--> link (on "load" resolve) (appendTo "head")))))))


(define $ jQuery)
;; (require "https://unpkg.com/alasql@0.4.11/dist/alasql.min.js")

(require "../examples/prism.js")

(define (prn x)
  (print x)
  x)

(define-macro (define-global first . rest)
  "(define-global var value)
   (define-global (name . args) body)

   Macro that define functions or variables in global context, so they can be used
   inside let and get let variables in closure, Useful for universal macros."
  (if (pair? first)
      (let ((name (car first)))
        `(--> (. lips 'env)
              (set ,(symbol->string name) (lambda ,(cdr first) ,@rest))))
      `(--> (. lips 'env) (set ,(symbol->string first) ,(car rest)))))

(define-macro (globalize expr . rest)
  "(globalize expr)

   Macro will get the value of the expression and add each method as function to global
   scope."
  (let ((obj (eval expr (current-environment)))
        (make-name (if (pair? rest)
                       (let ((pre (car rest)))
                         (lambda (name) (string->symbol (concat pre name))))
                       string->symbol)))
    `(begin
       ,@(filter pair?
                 (map (lambda (key)
                        (if (function? (. obj key))
                            (let* ((fname (gensym))
                                   (args (gensym)))
                              `(define-global (,(make-name key) . ,args)
                                 (apply (. ,expr ,key) ,args)))))
                        (array->list (--> Object (keys obj))))))))


;; setup isomorphic-git and global fs methods as functions

(let* ((fs (new LightningFS "fs"))
       (pfs (. fs 'promises)))
  (global fs)
  (--> (. git 'plugins) (set "fs" fs))
  (globalize git git.)
  (globalize (let ((x pfs)) x) fs.))


(define (new-repo dir)
  "Prepare new git repo with base app"
  (let ((dir (if (null? (match /^\// dir)) (concat "/" dir) dir)))
    (if (not (is-dir dir))
        (begin
          (fs.mkdir dir)
          (git.init (make-object :dir dir))))))


(define (is-dir x)
  "check if value is directory. if it don't exists it return false."
  (try (eq? (. (fs.stat x) 'type) "dir")
       (catch (e) false)))


(define (resiter-service-worker file)
  (let* ((scope (replace /\/[^\/]+$/ "/" (. location 'pathname)))
         (register (. navigator 'serviceWorker 'register)))
    (register "sw.js" (make-object :scope scope))))

;; registering service worker
(ignore (try (let ((req (resiter-service-worker "sw.js")))
               (global req)
               (--> req (addEventListener "updatefound" (lambda ()
                                                          (let ((msg "A new service worker is being installed"))
                                                            (--> console (log msg))))))
               (--> console (log (concat "Registration succeeded. Scope is " (. req 'scope)))))
             (catch (e)
                    (--> console (log (concat "Registration failed " e))))))

(--> ($ ".container")
     (split (make-object :percent true
                         :orientation "horizontal"
                         :limit 10
                         :position "70%"))
     (find ".panels")
     (split (make-object :percent true
                         :orientation "vertical"
                         :limit 10
                         :position (list->array '("33%" "33%")))))


(define (editor selector mode)
  (--> CodeMirror (fromTextArea (--> document (querySelector selector))
                                (make-object :mode mode
                                             :theme "twilight"
                                             :matchBrackets true
                                             :lineNumbers true))))

(define css-editor (editor ".css .code" "css"))
(define lips-editor (editor ".lips .code" "scheme"))
(define html-editor (editor ".html .code" "htmlmixed"))

;; terminal function defined in ../examples/terminal.js
(define term (terminal (make-object :selector ($ ".term") :lips lips :name "lips-editor")))
(--> (. $ 'terminal) (syntax "scheme"))



(--> ($ "body") (removeClass "cloak"))

(define-macro (let** list . body)
  `(apply (lambda ,(map car list) ,@body) (list* ,@(map cadr list))))

(define (ajax path)
  (--> (fetch path) (text)))

(define (new-app dir)
  (let ((helpers.lips (ajax "../examples/helpers.lips"))
        (index.html (ajax "template/index.html"))
        (app.lips (ajax "template/app.lips")))
    (fs.writeFile (join "/" (list dir "index.html")) index.html)
    (fs.writeFile (join "/" (list dir "app.lips")) app.lips)
    (fs.writeFile (join "/" (list dir "helpers.lips")) helpers.lips)
    (--> html-editor (setValue index.html))
    (--> lips-editor (setValue app.lips))))

(define (readFile path)
  (let ((d (new TextDecoder "utf-8")))
    (--> d (decode (fs.readFile path)))))

