<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>LIPS: Powerful Scheme based lisp interpreter in JavaScript</title>
    <link rel="canonical" href="https://lips.js.org/" />
    <meta name="Description" content="Modern and powerful lisp language written in JavaScript with literal regexes, that hide use of promises, full access to JavaScript, lisp macro system and hygienic macros."/>
{{HEAD}}
  <section id="summary">
    <header><h2>Summary</h2></header>
    <p>LIPS is poweful Scheme based lisp language written in JavaScript. The name is recursive acronym which stands for LIPS is Pretty Simple. The interpreter have very good integration with JavaScript.</p>
    <p>Key features of the interpreter:</p>
    <ul>
      <li>Lisp Macros, backquote and macroexpand,</li>
      <li>Familiar Scheme like Syntax,</li>
      <li>Functions in LIPS are normal javascript functions,</li>
      <li>Builtin documentation for macros and functions (use help in REPL),</li>
      <li>Library agnostic with almost no dependencies,</li>
      <li>You can invoke native JavaScript functions and methods from LIPS,</li>
      <li>Promises are treated as values they resolve to (so async code look like sync - like auto <code><strong>async/await</strong></code>),</li>
      <li>Easy extension using JavaScript using Macros or functions,</li>
      <li>Regexes are first class objects same as macros that are resolved at runtime,</li>
      <li>BigInt support (for browsers that don't have native support you will need <a href="https://github.com/indutny/bn.js/">bn.js</a>),</li>
      <li>Optional dynamic scope (like in Emacs Lisp),</li>
      <li>Node.js and Web based Interpreter (REPL).</li>
    </ul>
  </section>
  <section id="demo">
    <header><h2>Demo</h2></header>
    <p>Check <a href="https://github.com/jcubic/lips/wiki/Getting-Started">Getting Started Guide</a> and
      try the interpreter while you will read the document.</p>
    <div class="tabs">
      <ul>
        <li><a href="#">lexical</a></li>
        <li><a href="#">dynamic</a>
      </ul>
      <div class="panels">
        <div class="term lexical">
        </div>
        <div class="term dynamic">
        </div>
      </div>
    </div>
  </section>
  <section id="beta">
    <header><h2>1.0.0 Beta version</h2></header>
    <p>To test latest beta version of the language, check <a href="/beta.html">LIPS Beta Demo</a>. Documentation (WIP) for version 1.0.0 can be found on <a href="https://github.com/jcubic/lips/wiki/v1.0-draft">Wiki</a>.</p>
  </section>
  <section id="bookmark">
    <header><h2>Bookmarklet</h2></header>
    <p>When you're learning Scheme language, you can run the REPL directly on any page that
       have Scheme tutorial you're learning from. It even work with PDF files and new empty tab
      (at least in Chrome). Drag this link <a id="bookmark_link">LIPS REPL</a> to your bookmarks. When you click on the bookmark it will run the interpreter.
    </p>
    <p>The bookmark can also be used to add REPL to your LIPS Web application.</p>
    <p><strong>NOTE:</strong> it will not work on this page, because it already
       have terminal on it and because it have not compatible LIPS version included.</p>
    <p>It may also not work no sites that are protected with
      <a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Content Security Policy</a></p>
    <script>
    (function() {
    var url = 'https://cdn.jsdelivr.net/gh/jcubic/lips@master/lib/js/bookmark.js';
    fetch(url).then(function(res) {
        return res.text();
    }).then(function(text) {
        var link = document.querySelector('#bookmark_link');
        link.setAttribute('href', text);
    });
    })();
    </script>
  </section>
  <section id="installation">
    <header><h2>Browser</h2></header>
    <p>When using LIPS interpreter in browser you need to include the main script file.</p>
    <p>If you want to use Webpack see <a href="https://github.com/jcubic/lips/wiki/Webpack">wiki page</a> for details.</p>
    <pre><code class="language-markup">
&lt;script src="https://unpkg.com/@jcubic/lips"&gt;&lt;/script&gt;
    </code></pre>
    <p>You can put LIPS code directly in script tag:</p>
    <pre><code class="language-markup">
&lt;script type="text/x-lips"&gt;
  (print "hello")
  ;; this will load and evaluate external file
  (load "example.lips")
&lt;script&gt;
    </code></pre>
    <p>You can also use src attribute to link to source file.</p>
    <pre><code class="language-html">
&lt;script type="text/x-lips" src="example.lips"&gt;&lt;script&gt;
    </code></pre>
    <header><h2>Node</h2></header>
    <pre><code class="language-bash">
npm install -g @jcubic/lips
    </code></pre>
    <p>To install 1.0.0 beta version use:</p>
    <pre><code class="language-bash">
npm install -g @jcubic/lips@beta
    </code></pre>
    <pre><code class="language-bash">
## if installed as global just use
lips
lips foo.lips
## you can also run code as string
lips -c '(print "hello world")'
    </code></pre>
    <p>You can also write scripts using LIPS with <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a></p>
    <p>Crete file foo.lips</p>
    <pre><code class="language-scheme">
#!/usr/bin/env lips
(let ((what "World"))
  (print (concat "Hello " what)))
    </code></pre>
    <p>Then run</p>
    <pre><code class="language-bash">
chmod a+x foo.lips
./foo.lips # or just foo.lips depend on your $PATH
    </code></pre>
    <header><h2>Direct API</h2></header>
    <p>You can also run execute LIPS programaticaly (in Node.js/Webpack).</p>
    <pre><code class="language-javascript">
var lips = require('@jcubic/lips');
// or
import lips from '@jcubic/lips';
    </code></pre>
    <p>Then use it like this:</p>
    <pre><code class="language-javascript">
lips.exec("(let ((a 10) (b 20)) (* a b))").then(result => {
   // result is always array
   const [value] = result;
   console.log(value);
});
    </code></pre>
  </section>
  {{FOOTER}}
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@jcubic/lips/dist/lips.min.js"></script>
  <!-- <script src="./src/lips.js"></script> -->
  <script src="https://cdn.jsdelivr.net/combine/npm/jquery,npm/jquery.terminal/js/jquery.terminal.min.js,npm/js-polyfills/keyboard.js,npm/prismjs/prism.js,npm/jquery.terminal/js/prism.js,npm/prismjs/components/prism-scheme.min.js,npm/prismjs/components/prism-javascript.min.js,npm/prismjs/components/prism-markup.min.js,npm/prismjs/components/prism-bash.min.js"></script>
  <!-- use after 1.0
       npm/@jcubic/lips@beta/lib/js/terminal.js,npm/@jcubic/lips@beta/lib/js/prism.js -->
  <script src="./examples/terminal.js"></script>
  <script src="./examples/prism.js"></script>
  <style>
   .token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {
       background: inherit;
   }
   .terminal span.token.boolean {
       font-weight: normal !important;
       color: inherit !important;
   }
   .terminal token.comment,
   .terminal .token.block-comment {
       color: #3d464f;
   }
  </style>
  <script>
   function interpreter(selector, dynamic) {
       var term = terminal({ selector, dynamic, name: 'demo', lips });
       term.echo('LIPS Demo version ' + lips.version + ' with [[b;#fff;]' +
                 (dynamic ? 'dynamic' : 'lexical') + ' scope]\n' +
                 'type [[b;#fff;](env)] to see environment with ' +
                 'functions macros and variables\nYou can also use [[b;#fff;](help obj)]' +
                 ' to display help for specic function or macro.\n', { formatters: false });
   }
   $(function() {

       function select(li) {
           li = $(li);
           var index = li.index();
           li.addClass('active')
             .siblings().removeClass('active');
           var term = tabs.find('.panels').children().eq(index)
                          .addClass('active');
           term.siblings().removeClass('active');
           return term;
       }
       var tabs = $('.tabs');
       select(tabs.find('ul li:eq(0)'));

       $.terminal.syntax("scheme");
       interpreter('.term.dynamic', true);
       interpreter('.term.lexical', false);

       tabs.on('click', 'ul li', function() {
           select(this).terminal().focus();
           return false;
       });
   });
  </script>
  <script type="text/x-lips" src="examples/helpers.lips"></script>
  <script type="text/x-lips" src="examples/defstruct.lips"></script>
</body>
</html>
