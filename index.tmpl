<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>LIPS - Scheme based LISP in JavaScript</title>
    <meta name="Description" content="Powefull LISP with regexes, that hide use of promises, full access to JavaScript and fully working real LISP macro system."/>
{{HEAD}}
  <section id="summary">
    <header><h2>Summary</h2></header>
    <p>LIPS is Scheme (dialect of Lisp) written in JavaScript. The name is recursive acronym which stands for LIPS is Pretty Simple</p>
    <p>Key features:</p>
    <ul>
      <li>Lisp Macros, backquote and macroexpand,</li>
      <li>Familiar Scheme like Syntax,</li>
      <li>Functions in LIPS are normal javascript functions,</li>
      <li>Built in documentation for macros and functions,</li>
      <li>Library agnosting with almost no dependencies,</li>
      <li>You can invoke native JavaScript functions and methods from LIPS,</li>
      <li>Promises are treated as values they resolve to (so async code look like sync - like auto <code><strong>async/await</strong></code>),</li>
      <li>Easy extension using JavaScript using Macros or functions,</li>
      <li>Regexes are first class objects,</li>
      <li>BigInt support (for browsers that don't have native support you will need <a href="https://github.com/indutny/bn.js/">bn.js</a>),</li>
      <li>Optional dynamic scope (like in Emacs LISP),</li>
    </ul>
  </section>
  <section id="demo">
    <header><h2>Demo</h2></header>
    <p>Check <a href="https://github.com/jcubic/lips/wiki/Getting-Started">Getting Started Guide</a> and
      try the interpreter while you will read the document.</p>
    <div class="tabs">
      <ul>
        <li><a href="#">lexical</a></li>
        <li><a href="#">dynamic</a>
      </ul>
      <div class="panels">
        <div class="term lexical">
        </div>
        <div class="term dynamic">
        </div>
      </div>
    </div>
  </section>
  <section id="installation">
    <header><h2>Installation</h2></header>
    <h3>Node/Webpack</h3>
    <pre><code class="language-bash">
npm install @jcubic/lips
## or global
npm install -g @jcubic/lips
    </code></pre>
    <p>then you code use:</p>
    <pre><code class="language-javascript">
var {exec} = require('@jcubic/lips');
// or
import {exec} from '@jcubic/lips';
    </code></pre>
    <p>Then use it like this:</p>
    <pre><code class="language-javascript">
exec("(let ((a 10) (b 20)) (* a b))").then(result => {
   const [value] = result;
   console.log(value);
});
    </code></pre>
    <h3>Browser</h3>
    <p>When using LISP in browser you need to include the file</p>
    <p>If you want to use Webpack see <a href="https://github.com/jcubic/lips/wiki/Webpack">wiki page</a> for details</p>
    <pre><code class="language-markup">
&lt;script src="https://unpkg.com/@jcubic/lips"&gt;&lt;/script&gt;
    </code></pre>
    <header><h2>Executable</h2></header>
    <p>There is also executable script, where you can run LIPS code from file or as REPL.</p>
    <pre><code class="language-bash">
## for repl
./node_modules/.bin/lips
## run file
./node_modules/.bin/lips foo.lips
## if installed as global just use
lips
lips foo.lips
## you can also run code as string
lips -c '(print "hello world")'
    </code></pre>
    <p>You can also write scripts using LIPS with <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a></p>
    <p>Crete file foo.lips</p>
    <pre><code class="language-scheme">
#!/usr/bin/env lips
(let ((what "World"))
  (print (concat "Hello " what)))
    </code></pre>
    <p>Then run</p>
    <pre><code class="language-bash">
chmod a+x foo.lips
./foo.lips # or just foo.lips depend on your $PATH
    </code></pre>
    <header><h2>Usage in HTML</h2></header>
    <p>In HTML you can just use inline code with proper type attribute (after including the lips js file)</p>
    <pre><code class="language-html">
  &lt;script type="text/x-lips"&gt;
    (print "hello")
    ;; this will load and evaluate external file
    (load "example.lips")
  &lt;script&gt;
    </code></pre>
    <p>You can also use src attribute to link to source file</p>
    <pre><code class="language-html">
  &lt;script type="text/x-lips" src="example.lips"&gt;&lt;script&gt;
    </code></pre>
    <p>You can also run LIPS code progamatically the same as in Node.</p>
  </section>
  <footer>
    <p>Copyright (c) 2018-2019 <a href="https://jcubic.pl/me">Jakub T. Jankiewicz</a></p>
  </footer>
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  <script src="https://unpkg.com/@jcubic/lips@x.x.x"></script>
  <!-- <script src="./src/lips.js"></script> -->
  <script src="https://unpkg.com/jquery.terminal@x.x.x/js/jquery.terminal.min.js"></script>
  <!-- <script src="../terminal/repo/js/jquery.terminal-src.js"></script> -->
  <script src="https://cdn.rawgit.com/inexorabletash/polyfill/master/keyboard.js"></script>
  <script src="https://unpkg.com/prismjs/prism.js"></script>
  <script src="https://unpkg.com/jquery.terminal/js/prism.js"></script>
  <script src="https://unpkg.com/prismjs/components/prism-scheme.min.js"></script>
  <script src="https://unpkg.com/prismjs/components/prism-javascript.min.js"></script>
  <script src="https://unpkg.com/prismjs/components/prism-markup.min.js"></script>
  <script src="https://unpkg.com/prismjs/components/prism-bash.min.js"></script>
  <script src="./examples/terminal.js"></script>
  <script src="./examples/prism.js"></script>
  <style>
   .token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {
       background: inherit;
   }
   .terminal span.token.boolean {
       font-weight: normal !important;
       color: inherit !important;
   }
   .terminal token.comment,
   .terminal .token.block-comment {
       color: #3d464f;
   }
  </style>
  <script>
   function interpreter(selector, dynamic) {
       var term = terminal({ selector, dynamic, name: 'demo', lips });
       term.echo('LIPS Demo version ' + lips.version + ' with [[b;#fff;]' +
                 (dynamic ? 'dynamic' : 'lexical') + ' scope]\n' +
                 'type [[b;#fff;](env)] to see environment with ' +
                 'functions macros and variables\nYou can also use [[b;#fff;](help obj)]' +
                 ' to display help for specic function or macro.\n', { formatters: false });
   }
   $(function() {

       function select(li) {
           li = $(li);
           var index = li.index();
           li.addClass('active')
             .siblings().removeClass('active');
           var term = tabs.find('.panels').children().eq(index)
                          .addClass('active');
           term.siblings().removeClass('active');
           return term;
       }
       var tabs = $('.tabs');
       select(tabs.find('ul li:eq(0)'));

       $.terminal.syntax("scheme");
       interpreter('.term.dynamic', true);
       interpreter('.term.lexical', false);

       tabs.on('click', 'ul li', function() {
           select(this).terminal().focus();
           return false;
       });
   });
  </script>
  <script type="text/x-lips" src="examples/helpers.lips"></script>
  <script type="text/x-lips" src="examples/defstruct.lips"></script>
</body>
</html>
